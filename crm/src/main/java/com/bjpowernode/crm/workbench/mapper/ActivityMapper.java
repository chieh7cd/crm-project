package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 19 15:56:42 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 19 15:56:42 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 19 15:56:42 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 19 15:56:42 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);



    /**
     * 保存创建的市场活动信息
     * @param activity 市场活动信息
     * @return 记录条数
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     * @param map 参数列表
     * @return 市场活动的列表
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map 参数列表
     * @return 市场活动总条数
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据市场活动id数组批量删除市场活动
     * @param ids 市场活动的id主键值数组
     * @return 删除记录条数
     */
    int deleteActivityByIds(String[] ids);


    /**
     * 根据市场活动id查询市场活动信息
     * @param id 市场活动id
     * @return Activity
     */
    Activity selectActivityById(String id);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 19 15:56:42 CST 2022
     * @param activity 把需要修改的内容封装到activity对象中
     */
    int updateActivity(Activity activity);


    /**
     * 查询所有的市场活动
     * @return 市场活动的集合
     */
    List<Activity> selectAllActivities();

    /**
     * 根据选中的id查询市场活动
     * @param ids 根据选中的id
     * @return Activity
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 批量保存创建的市场活动
     * @param activityList 市场活动列表
     * @return 影响记录条数
     */
    int insertActivityByList(List<Activity> activityList);


    /**
     *根据id查询市场活动明细
     */
    Activity selectActivityForDetailById(String id);


    /**
     * 根据clueId查询该线索相关联的市场活动的明细信息
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);


    /**
     * 根据name模糊查询市场活动，并且把已经根clueId关联过的市场活动排除
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据id数据查询市场活动的明细信息
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);


    /**
     * 根据市场活动name模糊查询市场活动，并且查询那些跟clueId已经关联过的市场活动
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);




}